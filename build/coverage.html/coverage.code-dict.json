{"/home/travis/build/npmtest/node-npmtest-nearley/test.js":"/* istanbul instrument in package npmtest_nearley */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-nearley/lib.npmtest_nearley.js":"/* istanbul instrument in package npmtest_nearley */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_nearley = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_nearley = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-nearley/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-nearley && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_nearley */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_nearley\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_nearley.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_nearley.rollup.js'] =\n            local.assetsDict['/assets.npmtest_nearley.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_nearley.__dirname + '/lib.npmtest_nearley.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-nearley/node_modules/nearley/lib/nearley.js":"(function(root, factory) {\n    // if (typeof define === 'function' && define.amd) {\n    //     define([], factory);\n    if (typeof module === 'object' && module.exports) {\n        module.exports = factory();\n    } else {\n        root.nearley = factory();\n    }\n}(this, function() {\n\nfunction Rule(name, symbols, postprocess) {\n    this.id = ++Rule.highestId;\n    this.name = name;\n    this.symbols = symbols;        // a list of literal | regex class | nonterminal\n    this.postprocess = postprocess;\n    return this;\n}\nRule.highestId = 0;\n\nRule.prototype.toString = function(withCursorAt) {\n    function stringifySymbolSequence (e) {\n        return (e.literal) ? JSON.stringify(e.literal)\n                           : e.toString();\n    }\n    var symbolSequence = (typeof withCursorAt === \"undefined\")\n                         ? this.symbols.map(stringifySymbolSequence).join(' ')\n                         : (   this.symbols.slice(0, withCursorAt).map(stringifySymbolSequence).join(' ')\n                             + \" ● \"\n                             + this.symbols.slice(withCursorAt).map(stringifySymbolSequence).join(' ')     );\n    return this.name + \" → \" + symbolSequence;\n}\n\n\n// a State is a rule at a position from a given starting point in the input stream (reference)\nfunction State(rule, dot, reference, wantedBy) {\n    this.rule = rule;\n    this.dot = dot;\n    this.reference = reference;\n    this.data = [];\n    this.wantedBy = wantedBy;\n    this.isComplete = this.dot === rule.symbols.length;\n}\n\nState.prototype.toString = function() {\n    return \"{\" + this.rule.toString(this.dot) + \"}, from: \" + (this.reference || 0);\n};\n\nState.prototype.nextState = function(data) {\n    var state = new State(this.rule, this.dot + 1, this.reference, this.wantedBy);\n    state.left = this;\n    state.right = data;\n    if (state.isComplete) {\n        state.data = state.build();\n    }\n    return state;\n};\n\nState.prototype.build = function() {\n    var children = [];\n    var node = this;\n    do {\n        children.push(node.right);\n        node = node.left;\n    } while (node.left);\n    children.reverse();\n    return children;\n};\n\nState.prototype.finish = function() {\n    if (this.rule.postprocess) {\n        this.data = this.rule.postprocess(this.data, this.reference, Parser.fail);\n    }\n};\n\n\nfunction Column(grammar, index) {\n    this.grammar = grammar;\n    this.index = index;\n    this.states = [];\n    this.wants = {}; // states indexed by the non-terminal they expect\n    this.scannable = []; // list of states that expect a token\n    this.completed = {}; // states that are nullable\n}\n\n\nColumn.prototype.process = function(nextColumn) {\n    var states = this.states;\n    var wants = this.wants;\n    var completed = this.completed;\n\n    for (var w = 0; w < states.length; w++) { // nb. we push() during iteration\n        var state = states[w];\n\n        if (state.isComplete) {\n            state.finish();\n            if (state.data !== Parser.fail) {\n                // complete\n                var wantedBy = state.wantedBy;\n                for (var i = wantedBy.length; i--; ) { // this line is hot\n                    var left = wantedBy[i];\n                    this.complete(left, state);\n                }\n\n                // special-case nullables\n                if (state.reference === this.index) {\n                    // make sure future predictors of this rule get completed. \n                    var exp = state.rule.name;\n                    (this.completed[exp] = this.completed[exp] || []).push(state);\n                }\n            }\n\n        } else {\n            // queue scannable states\n            var exp = state.rule.symbols[state.dot];\n            if (typeof exp !== 'string') {\n                this.scannable.push(state);\n                continue;\n            }\n\n            // predict\n            if (wants[exp]) {\n                wants[exp].push(state);\n\n                if (completed.hasOwnProperty(exp)) {\n                    var nulls = completed[exp];\n                    for (var i = 0; i < nulls.length; i++) {\n                        var right = nulls[i];\n                        this.complete(state, right);\n                    }\n                }\n            } else {\n                wants[exp] = [state];\n                this.predict(exp);\n            }\n        }\n    }\n}\n\nColumn.prototype.predict = function(exp) {\n    var rules = this.grammar.byName[exp] || [];\n\n    for (var i = 0; i < rules.length; i++) {\n        var r = rules[i];\n        var wantedBy = this.wants[exp];\n        var s = new State(r, 0, this.index, wantedBy);\n        this.states.push(s);\n    }\n}\n\nColumn.prototype.complete = function(left, right) {\n    var inp = right.rule.name;\n    if (left.rule.symbols[left.dot] === inp) {\n        var copy = left.nextState(right.data);\n        this.states.push(copy);\n    }\n}\n\n\nfunction Grammar(rules, start) {\n    this.rules = rules;\n    this.start = start || this.rules[0].name;\n    var byName = this.byName = {};\n    this.rules.forEach(function(rule) {\n        if (!byName.hasOwnProperty(rule.name)) {\n            byName[rule.name] = [];\n        }\n        byName[rule.name].push(rule);\n    });\n}\n\n// So we can allow passing (rules, start) directly to Parser for backwards compatibility\nGrammar.fromCompiled = function(rules, start) {\n    if (rules.ParserStart) {\n      start = rules.ParserStart;\n      rules = rules.ParserRules;\n    }\n    var rules = rules.map(function (r) { return (new Rule(r.name, r.symbols, r.postprocess)); });\n    return new Grammar(rules, start);\n}\n\n\nfunction Parser(rules, start, options) {\n    if (rules instanceof Grammar) {\n        var grammar = rules;\n        var options = start;\n    } else {\n        var grammar = Grammar.fromCompiled(rules, start);\n    }\n    this.grammar = grammar;\n\n    // Read options\n    this.options = {\n        keepHistory: false,\n        // rewindable: false,\n    };\n    for (var key in (options || {})) {\n        this.options[key] = options[key];\n    }\n    // if (this.options.rewindable) { this.options.keepHistory = true; }\n\n    // Setup a table\n    var column = new Column(grammar, 0);\n    var table = this.table = [column];\n\n    // I could be expecting anything.\n    column.wants[grammar.start] = [];\n    column.predict(grammar.start);\n    // TODO what if start rule is nullable?\n    column.process();\n    this.current = 0;\n}\n\n// create a reserved token for indicating a parse fail\nParser.fail = {};\n\nParser.prototype.feed = function(chunk) {\n    for (var chunkPos = 0; chunkPos < chunk.length; chunkPos++) {\n        // We add new states to table[current+1]\n        var column = this.table[this.current + chunkPos];\n\n        // GC unused states\n        if (!this.options.keepHistory) {\n            delete this.table[this.current + chunkPos - 1];\n        }\n\n        var n = this.current + chunkPos + 1;\n        var nextColumn = new Column(this.grammar, n);\n        this.table.push(nextColumn);\n\n        // Advance all tokens that expect the symbol\n        // So for each state in the previous row,\n\n        var token = chunk[chunkPos];\n        var scannable = column.scannable;\n        for (var w = scannable.length; w--; ) {\n            var state = scannable[w];\n            var expect = state.rule.symbols[state.dot];\n            // Try to consume the token\n            // either regex or literal\n            if (expect.test ? expect.test(token) : expect.literal === token) {\n                // Add it\n                var next = state.nextState(token);\n                nextColumn.states.push(next);\n            }\n        }\n\n        // Next, for each of the rules, we either\n        // (a) complete it, and try to see if the reference row expected that\n        //     rule\n        // (b) predict the next nonterminal it expects by adding that\n        //     nonterminal's start state\n        // To prevent duplication, we also keep track of rules we have already\n        // added\n\n        nextColumn.process();\n\n        // If needed, throw an error:\n        if (nextColumn.states.length === 0) {\n            // No states at all! This is not good.\n            var err = new Error(\n                \"nearley: No possible parsings (@\" + (this.current + chunkPos)\n                    + \": '\" + chunk[chunkPos] + \"').\"\n            );\n            err.offset = this.current + chunkPos;\n            throw err;\n        }\n    }\n\n    this.current += chunkPos;\n\n    // Incrementally keep track of results\n    this.results = this.finish();\n\n    // Allow chaining, for whatever it's worth\n    return this;\n};\n\nParser.prototype.rewind = function(index) {\n    if (!this.options.keepHistory) {\n        throw new Error('set option `keepHistory` to enable rewinding')\n    }\n    if (this.current < this.index) {\n        // TODO: api -- consider silently succeeding?\n        throw new Error('cannot rewind forward!')\n    }\n    /*\n     * recall column (table) indicies fall between token indicies.\n     *\n     *    col 0   --   token 0   --   col 1\n     */\n    this.table.splice(index + 1);\n    this.current = index;\n\n    // Incrementally keep track of results\n    this.results = this.finish();\n};\n\nParser.prototype.finish = function() {\n    // Return the possible parsings\n    var considerations = [];\n    var start = this.grammar.start;\n    var column = this.table[this.table.length - 1]\n    column.states.forEach(function (t) {\n        if (t.rule.name === start\n                && t.dot === t.rule.symbols.length\n                && t.reference === 0\n                && t.data !== Parser.fail) {\n            considerations.push(t);\n        }\n    });\n    return considerations.map(function(c) {return c.data; });\n};\n\nreturn {\n    Parser: Parser,\n    Grammar: Grammar,\n    Rule: Rule,\n};\n\n}));\n","/home/travis/build/npmtest/node-npmtest-nearley/node_modules/nearley/bin/nearleyc.js":"#!/usr/bin/env node\n\nvar fs = require('fs');\nvar nearley = require('../lib/nearley.js');\nvar nomnom = require('nomnom');\nvar Compile = require('../lib/compile.js');\nvar StreamWrapper = require('../lib/stream.js');\n\nvar opts = nomnom\n    .script('nearleyc')\n    .option('file', {\n        position: 0,\n        help: \"An input .ne file (if not provided then read from stdin)\",\n    })\n    .option('out', {\n        abbr: 'o',\n        help: \"File to output to (defaults to stdout)\",\n    })\n    .option('export', {\n        abbr: 'e',\n        help: \"Variable to set the parser to\",\n        default: \"grammar\"\n    })\n    .option('nojs', {\n        flag: true,\n        default: false,\n        help: \"Don't compile postprocessors (for testing).\"\n    })\n    .option('version', {\n        abbr: 'v',\n        flag: true,\n        help: \"Print version and exit\",\n        callback: function() {\n            return require('../package.json').version;\n        }\n    })\n    .parse();\n\nvar input = opts.file ? fs.createReadStream(opts.file) : process.stdin;\nvar output = opts.out ? fs.createWriteStream(opts.out) : process.stdout;\n\nvar parserGrammar = require('../lib/nearley-language-bootstrapped.js');\nvar parser = new nearley.Parser(parserGrammar.ParserRules, parserGrammar.ParserStart);\nvar generate = require('../lib/generate.js');\nvar lint = require('../lib/lint.js');\n\ninput\n    .pipe(new StreamWrapper(parser))\n    .on('finish', function() {\n        var c = Compile(parser.results[0], opts);\n        lint(c, {'out': process.stderr});\n        output.write(generate(c, opts.export));\n    });\n","/home/travis/build/npmtest/node-npmtest-nearley/node_modules/nearley/lib/compile.js":"(function(root, factory) {\n    // if (typeof define === 'function' && define.amd) {\n    //     define(['nearley'], factory);\n    if (typeof module === 'object' && module.exports) {\n        module.exports = factory(require('./nearley'));\n    } else {\n        root.Compile = factory(root.nearley);\n    }\n}(this, function(nearley) {\n\nfunction Compile(structure, opts) {\n    var unique = uniquer();\n    if (!opts.alreadycompiled) {\n        opts.alreadycompiled = [];\n    }\n\n    var result = {\n        rules: [],\n        body: [], // @directives list\n        config: {}, // @config value\n        macros: {},\n        start: ''\n    };\n\n    for (var i = 0; i < structure.length; i++) {\n        var productionRule = structure[i];\n        if (productionRule.body) {\n            // This isn't a rule, it's an @directive.\n            if (!opts.nojs) {\n                result.body.push(productionRule.body);\n            }\n        } else if (productionRule.include) {\n            // Include file\n            var path;\n            if (!productionRule.builtin) {\n                path = require('path').resolve(\n                    opts.file ? require('path').dirname(opts.file) : process.cwd(),\n                    productionRule.include\n                );\n            } else {\n                path = require('path').resolve(\n                    __dirname,\n                    '../builtin/',\n                    productionRule.include\n                );\n            }\n            if (opts.alreadycompiled.indexOf(path) === -1) {\n                opts.alreadycompiled.push(path);\n                f = require('fs').readFileSync(path).toString();\n                var parserGrammar = new require('./nearley-language-bootstrapped.js');\n                var parser = new nearley.Parser(parserGrammar.ParserRules, parserGrammar.ParserStart);\n                parser.feed(f);\n                var c = Compile(parser.results[0], {path: path, __proto__:opts});\n                require('./lint.js')(c, {out: process.stderr});\n                result.rules = result.rules.concat(c.rules);\n                result.body  = result.body.concat(c.body);\n                Object.keys(c.config).forEach(function(k) {\n                    result.config[k] = c.config[k];\n                });\n                Object.keys(c.macros).forEach(function(k) {\n                    result.macros[k] = c.macros[k];\n                });\n            }\n        } else if (productionRule.macro) {\n            result.macros[productionRule.macro] = {\n                'args': productionRule.args,\n                'exprs': productionRule.exprs\n            };\n        } else if (productionRule.config) {\n            // This isn't a rule, it's an @config.\n            result.config[productionRule.config] = productionRule.value\n        } else {\n            produceRules(productionRule.name, productionRule.rules, {});\n            if (!result.start) {\n                result.start = productionRule.name;\n            }\n        }\n    }\n\n    return result;\n\n    function produceRules(name, rules, env) {\n        for (var i = 0; i < rules.length; i++) {\n            var rule = buildRule(name, rules[i], env);\n            if (opts.nojs) {\n                rule.postprocess = null;\n            }\n            result.rules.push(rule);\n        }\n    }\n\n    function buildRule(ruleName, rule, env) {\n        var tokens = [];\n        for (var i = 0; i < rule.tokens.length; i++) {\n            var token = buildToken(ruleName, rule.tokens[i], env);\n            if (token !== null) {\n                tokens.push(token);\n            }\n        }\n        return new nearley.Rule(\n            ruleName,\n            tokens,\n            rule.postprocess\n        );\n    }\n\n    function buildToken(ruleName, token, env) {\n        if (typeof token === 'string') {\n            if (token === 'null') {\n                return null;\n            }\n            return token;\n        }\n\n        if (token instanceof RegExp) {\n            return token;\n        }\n\n        if (token.literal) {\n            if (!token.literal.length) {\n                return null;\n            }\n            if (token.literal.length === 1) {\n                return token;\n            }\n            return buildStringToken(ruleName, token, env);\n        }\n        if (token.token) {\n            return token;\n        }\n\n        if (token.subexpression) {\n            return buildSubExpressionToken(ruleName, token, env);\n        }\n\n        if (token.ebnf) {\n            return buildEBNFToken(ruleName, token, env);\n        }\n\n        if (token.macrocall) {\n            return buildMacroCallToken(ruleName, token, env);\n        }\n\n        if (token.mixin) {\n            if (env[token.mixin]) {\n                return buildToken(ruleName, env[token.mixin], env);\n            } else {\n                throw new Error(\"Unbound variable: \" + token.mixin);\n            }\n        }\n\n        throw new Error(\"unrecognized token: \" + JSON.stringify(token));\n    }\n\n    function buildStringToken(ruleName, token, env) {\n        var newname = unique(ruleName + \"$string\");\n        produceRules(newname, [\n            {\n                tokens: token.literal.split(\"\").map(function charLiteral(d) {\n                    return {\n                        literal: d\n                    };\n                }),\n                postprocess: {builtin: \"joiner\"}\n            }\n        ], env);\n        return newname;\n    }\n\n    function buildSubExpressionToken(ruleName, token, env) {\n        var data = token.subexpression;\n        var name = unique(ruleName + \"$subexpression\");\n        //structure.push({\"name\": name, \"rules\": data});\n        produceRules(name, data, env);\n        return name;\n    }\n\n    function buildEBNFToken(ruleName, token, env) {\n        switch (token.modifier) {\n            case \":+\":\n                return buildEBNFPlus(ruleName, token, env);\n            case \":*\":\n                return buildEBNFStar(ruleName, token, env);\n            case \":?\":\n                return buildEBNFOpt(ruleName, token, env);\n        }\n    }\n\n    function buildEBNFPlus(ruleName, token, env) {\n        var name = unique(ruleName + \"$ebnf\");\n        /*\n        structure.push({\n            name: name,\n            rules: [{\n                tokens: [token.ebnf],\n            }, {\n                tokens: [token.ebnf, name],\n                postprocess: {builtin: \"arrconcat\"}\n            }]\n        });\n        */\n        produceRules(name,\n            [{\n                tokens: [token.ebnf],\n            }, {\n                tokens: [name, token.ebnf],\n                postprocess: {builtin: \"arrpush\"}\n            }],\n            env\n        );\n        return name;\n    }\n\n    function buildEBNFStar(ruleName, token, env) {\n        var name = unique(ruleName + \"$ebnf\");\n        /*\n        structure.push({\n            name: name,\n            rules: [{\n                tokens: [],\n            }, {\n                tokens: [token.ebnf, name],\n                postprocess: {builtin: \"arrconcat\"}\n            }]\n        });\n        */\n        produceRules(name,\n            [{\n                tokens: [],\n            }, {\n                tokens: [name, token.ebnf],\n                postprocess: {builtin: \"arrpush\"}\n            }],\n            env\n        );\n        return name;\n    }\n\n    function buildEBNFOpt(ruleName, token, env) {\n        var name = unique(ruleName + \"$ebnf\");\n        /*\n        structure.push({\n            name: name,\n            rules: [{\n                tokens: [token.ebnf],\n                postprocess: {builtin: \"id\"}\n            }, {\n                tokens: [],\n                postprocess: {builtin: \"nuller\"}\n            }]\n        });\n        */\n        produceRules(name,\n            [{\n                tokens: [token.ebnf],\n                postprocess: {builtin: \"id\"}\n            }, {\n                tokens: [],\n                postprocess: {builtin: \"nuller\"}\n            }],\n            env\n        );\n        return name;\n    }\n\n    function buildMacroCallToken(ruleName, token, env) {\n        var name = unique(ruleName + \"$macrocall\");\n        var macro = result.macros[token.macrocall];\n        if (!macro) {\n            throw new Error(\"Unkown macro: \"+token.macrocall);\n        }\n        if (macro.args.length !== token.args.length) {\n            throw new Error(\"Argument count mismatch.\");\n        }\n        var newenv = {__proto__: env};\n        for (var i=0; i<macro.args.length; i++) {\n            var argrulename = unique(ruleName + \"$macrocall\");\n            newenv[macro.args[i]] = argrulename;\n            produceRules(argrulename, [token.args[i]], env);\n            //structure.push({\"name\": argrulename, \"rules\":[token.args[i]]});\n            //buildRule(name, token.args[i], env);\n        }\n        produceRules(name, macro.exprs, newenv);\n        return name;\n    }\n}\n\nfunction uniquer() {\n    var uns = {};\n    return unique;\n    function unique(name) {\n        var un = uns[name] = (uns[name] || 0) + 1;\n        return name + '$' + un;\n    }\n}\n\nreturn Compile;\n\n}));\n","/home/travis/build/npmtest/node-npmtest-nearley/node_modules/nearley/lib/stream.js":"// Node-only\n\nvar Writable = require('stream').Writable;\nvar util = require('util');\n\nfunction StreamWrapper(parser) {\n    Writable.call(this);\n    this._parser = parser;\n}\n\nutil.inherits(StreamWrapper, Writable);\n\nStreamWrapper.prototype._write = function write(chunk, encoding, callback) {\n    this._parser.feed(chunk.toString());\n    callback();\n};\n\nmodule.exports = StreamWrapper;\n","/home/travis/build/npmtest/node-npmtest-nearley/node_modules/nearley/lib/nearley-language-bootstrapped.js":"// Generated automatically by nearley\n// http://github.com/Hardmath123/nearley\n(function () {\nfunction id(x) {return x[0]; }\n\nfunction nth(n) {\n    return function(d) {\n        return d[n];\n    };\n}\n\n\nfunction $(o) {\n    return function(d) {\n        var ret = {};\n        Object.keys(o).forEach(function(k) {\n            ret[k] = d[o[k]];\n        });\n        return ret;\n    };\n}\nvar grammar = {\n    ParserRules: [\n    {\"name\": \"dqstring$ebnf$1\", \"symbols\": []},\n    {\"name\": \"dqstring$ebnf$1\", \"symbols\": [\"dqstring$ebnf$1\", \"dstrchar\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"dqstring\", \"symbols\": [{\"literal\":\"\\\"\"}, \"dqstring$ebnf$1\", {\"literal\":\"\\\"\"}], \"postprocess\": function(d) {return d[1].join(\"\"); }},\n    {\"name\": \"sqstring$ebnf$1\", \"symbols\": []},\n    {\"name\": \"sqstring$ebnf$1\", \"symbols\": [\"sqstring$ebnf$1\", \"sstrchar\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"sqstring\", \"symbols\": [{\"literal\":\"'\"}, \"sqstring$ebnf$1\", {\"literal\":\"'\"}], \"postprocess\": function(d) {return d[1].join(\"\"); }},\n    {\"name\": \"btstring$ebnf$1\", \"symbols\": []},\n    {\"name\": \"btstring$ebnf$1\", \"symbols\": [\"btstring$ebnf$1\", /[^`]/], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"btstring\", \"symbols\": [{\"literal\":\"`\"}, \"btstring$ebnf$1\", {\"literal\":\"`\"}], \"postprocess\": function(d) {return d[1].join(\"\"); }},\n    {\"name\": \"dstrchar\", \"symbols\": [/[^\\\\\"\\n]/], \"postprocess\": id},\n    {\"name\": \"dstrchar\", \"symbols\": [{\"literal\":\"\\\\\"}, \"strescape\"], \"postprocess\": \n        function(d) {\n            return JSON.parse(\"\\\"\"+d.join(\"\")+\"\\\"\");\n        }\n        },\n    {\"name\": \"sstrchar\", \"symbols\": [/[^\\\\\\n]/], \"postprocess\": id},\n    {\"name\": \"sstrchar\", \"symbols\": [{\"literal\":\"\\\\\"}, \"strescape\"], \"postprocess\": function(d) { return JSON.parse(\"\\\"\"+d.join(\"\")+\"\\\"\"); }},\n    {\"name\": \"sstrchar$string$1\", \"symbols\": [{\"literal\":\"\\\\\"}, {\"literal\":\"'\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"sstrchar\", \"symbols\": [\"sstrchar$string$1\"], \"postprocess\": function(d) {return \"'\"; }},\n    {\"name\": \"strescape\", \"symbols\": [/[\"\\\\\\/bfnrt]/], \"postprocess\": id},\n    {\"name\": \"strescape\", \"symbols\": [{\"literal\":\"u\"}, /[a-fA-F0-9]/, /[a-fA-F0-9]/, /[a-fA-F0-9]/, /[a-fA-F0-9]/], \"postprocess\": \n        function(d) {\n            return d.join(\"\");\n        }\n        },\n    {\"name\": \"final\", \"symbols\": [\"whit?\", \"prog\", \"whit?\"], \"postprocess\": function(d) { return d[1]; }},\n    {\"name\": \"prog\", \"symbols\": [\"prod\"], \"postprocess\": function(d) { return [d[0]]; }},\n    {\"name\": \"prog\", \"symbols\": [\"prod\", \"whit\", \"prog\"], \"postprocess\": function(d) { return [d[0]].concat(d[2]); }},\n    {\"name\": \"prod$ebnf$1$subexpression$1\", \"symbols\": [{\"literal\":\"-\"}]},\n    {\"name\": \"prod$ebnf$1$subexpression$1\", \"symbols\": [{\"literal\":\"=\"}]},\n    {\"name\": \"prod$ebnf$1\", \"symbols\": [\"prod$ebnf$1$subexpression$1\"]},\n    {\"name\": \"prod$ebnf$1$subexpression$2\", \"symbols\": [{\"literal\":\"-\"}]},\n    {\"name\": \"prod$ebnf$1$subexpression$2\", \"symbols\": [{\"literal\":\"=\"}]},\n    {\"name\": \"prod$ebnf$1\", \"symbols\": [\"prod$ebnf$1\", \"prod$ebnf$1$subexpression$2\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"prod\", \"symbols\": [\"word\", \"whit?\", \"prod$ebnf$1\", {\"literal\":\">\"}, \"whit?\", \"expression+\"], \"postprocess\": function(d) { return {name: d[0], rules: d[5]}; }},\n    {\"name\": \"prod$ebnf$2$subexpression$1\", \"symbols\": [{\"literal\":\"-\"}]},\n    {\"name\": \"prod$ebnf$2$subexpression$1\", \"symbols\": [{\"literal\":\"=\"}]},\n    {\"name\": \"prod$ebnf$2\", \"symbols\": [\"prod$ebnf$2$subexpression$1\"]},\n    {\"name\": \"prod$ebnf$2$subexpression$2\", \"symbols\": [{\"literal\":\"-\"}]},\n    {\"name\": \"prod$ebnf$2$subexpression$2\", \"symbols\": [{\"literal\":\"=\"}]},\n    {\"name\": \"prod$ebnf$2\", \"symbols\": [\"prod$ebnf$2\", \"prod$ebnf$2$subexpression$2\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"prod\", \"symbols\": [\"word\", {\"literal\":\"[\"}, \"wordlist\", {\"literal\":\"]\"}, \"whit?\", \"prod$ebnf$2\", {\"literal\":\">\"}, \"whit?\", \"expression+\"], \"postprocess\": function(d) {return {macro: d[0], args: d[2], exprs: d[8]}}},\n    {\"name\": \"prod\", \"symbols\": [{\"literal\":\"@\"}, \"whit?\", \"js\"], \"postprocess\": function(d) { return {body: d[2]}; }},\n    {\"name\": \"prod\", \"symbols\": [{\"literal\":\"@\"}, \"word\", \"whit\", \"word\"], \"postprocess\": function(d) { return {config: d[1], value: d[3]}; }},\n    {\"name\": \"prod$string$1\", \"symbols\": [{\"literal\":\"@\"}, {\"literal\":\"i\"}, {\"literal\":\"n\"}, {\"literal\":\"c\"}, {\"literal\":\"l\"}, {\"literal\":\"u\"}, {\"literal\":\"d\"}, {\"literal\":\"e\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"prod\", \"symbols\": [\"prod$string$1\", \"whit?\", \"string\"], \"postprocess\": function(d) {return {include: d[2].literal, builtin: false}}},\n    {\"name\": \"prod$string$2\", \"symbols\": [{\"literal\":\"@\"}, {\"literal\":\"b\"}, {\"literal\":\"u\"}, {\"literal\":\"i\"}, {\"literal\":\"l\"}, {\"literal\":\"t\"}, {\"literal\":\"i\"}, {\"literal\":\"n\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"prod\", \"symbols\": [\"prod$string$2\", \"whit?\", \"string\"], \"postprocess\": function(d) {return {include: d[2].literal, builtin: true }}},\n    {\"name\": \"expression+\", \"symbols\": [\"completeexpression\"]},\n    {\"name\": \"expression+\", \"symbols\": [\"expression+\", \"whit?\", {\"literal\":\"|\"}, \"whit?\", \"completeexpression\"], \"postprocess\": function(d) { return d[0].concat([d[4]]); }},\n    {\"name\": \"expressionlist\", \"symbols\": [\"completeexpression\"]},\n    {\"name\": \"expressionlist\", \"symbols\": [\"expressionlist\", \"whit?\", {\"literal\":\",\"}, \"whit?\", \"completeexpression\"], \"postprocess\": function(d) { return d[0].concat([d[4]]); }},\n    {\"name\": \"wordlist\", \"symbols\": [\"word\"]},\n    {\"name\": \"wordlist\", \"symbols\": [\"wordlist\", \"whit?\", {\"literal\":\",\"}, \"whit?\", \"word\"], \"postprocess\": function(d) { return d[0].concat([d[4]]); }},\n    {\"name\": \"completeexpression\", \"symbols\": [\"expr\"], \"postprocess\": function(d) { return {tokens: d[0]}; }},\n    {\"name\": \"completeexpression\", \"symbols\": [\"expr\", \"whit?\", \"js\"], \"postprocess\": function(d) { return {tokens: d[0], postprocess: d[2]}; }},\n    {\"name\": \"expr_member\", \"symbols\": [\"word\"], \"postprocess\": id},\n    {\"name\": \"expr_member\", \"symbols\": [{\"literal\":\"$\"}, \"word\"], \"postprocess\": function(d) {return {mixin: d[1]}}},\n    {\"name\": \"expr_member\", \"symbols\": [\"word\", {\"literal\":\"[\"}, \"expressionlist\", {\"literal\":\"]\"}], \"postprocess\": function(d) {return {macrocall: d[0], args: d[2]}}},\n    {\"name\": \"expr_member\", \"symbols\": [\"string\"], \"postprocess\": id},\n    {\"name\": \"expr_member\", \"symbols\": [{\"literal\":\"%\"}, \"word\"], \"postprocess\": function(d) {return {token: d[1]}}},\n    {\"name\": \"expr_member\", \"symbols\": [\"charclass\"], \"postprocess\": id},\n    {\"name\": \"expr_member\", \"symbols\": [{\"literal\":\"(\"}, \"whit?\", \"expression+\", \"whit?\", {\"literal\":\")\"}], \"postprocess\": function(d) {return {'subexpression': d[2]} ;}},\n    {\"name\": \"expr_member\", \"symbols\": [\"expr_member\", \"whit?\", \"ebnf_modifier\"], \"postprocess\": function(d) {return {'ebnf': d[0], 'modifier': d[2]}; }},\n    {\"name\": \"ebnf_modifier$string$1\", \"symbols\": [{\"literal\":\":\"}, {\"literal\":\"+\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"ebnf_modifier\", \"symbols\": [\"ebnf_modifier$string$1\"], \"postprocess\": id},\n    {\"name\": \"ebnf_modifier$string$2\", \"symbols\": [{\"literal\":\":\"}, {\"literal\":\"*\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"ebnf_modifier\", \"symbols\": [\"ebnf_modifier$string$2\"], \"postprocess\": id},\n    {\"name\": \"ebnf_modifier$string$3\", \"symbols\": [{\"literal\":\":\"}, {\"literal\":\"?\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"ebnf_modifier\", \"symbols\": [\"ebnf_modifier$string$3\"], \"postprocess\": id},\n    {\"name\": \"expr\", \"symbols\": [\"expr_member\"]},\n    {\"name\": \"expr\", \"symbols\": [\"expr\", \"whit\", \"expr_member\"], \"postprocess\": function(d){ return d[0].concat([d[2]]); }},\n    {\"name\": \"word\", \"symbols\": [/[\\w\\?\\+]/], \"postprocess\": function(d){ return d[0]; }},\n    {\"name\": \"word\", \"symbols\": [\"word\", /[\\w\\?\\+]/], \"postprocess\": function(d){ return d[0]+d[1]; }},\n    {\"name\": \"string\", \"symbols\": [\"dqstring\"], \"postprocess\": function(d) {return { literal: d[0] }; }},\n    {\"name\": \"charclass\", \"symbols\": [{\"literal\":\".\"}], \"postprocess\": function(d) { return new RegExp(\".\"); }},\n    {\"name\": \"charclass\", \"symbols\": [{\"literal\":\"[\"}, \"charclassmembers\", {\"literal\":\"]\"}], \"postprocess\": function(d) { return new RegExp(\"[\" + d[1].join('') + \"]\"); }},\n    {\"name\": \"charclassmembers\", \"symbols\": []},\n    {\"name\": \"charclassmembers\", \"symbols\": [\"charclassmembers\", \"charclassmember\"], \"postprocess\": function(d) { return d[0].concat([d[1]]); }},\n    {\"name\": \"charclassmember\", \"symbols\": [/[^\\\\\\]]/], \"postprocess\": function(d) { return d[0]; }},\n    {\"name\": \"charclassmember\", \"symbols\": [{\"literal\":\"\\\\\"}, /./], \"postprocess\": function(d) { return d[0] + d[1]; }},\n    {\"name\": \"js\", \"symbols\": [{\"literal\":\"{\"}, {\"literal\":\"%\"}, \"jscode\", {\"literal\":\"%\"}, {\"literal\":\"}\"}], \"postprocess\": function(d) { return d[2]; }},\n    {\"name\": \"jscode\", \"symbols\": [], \"postprocess\": function() {return \"\";}},\n    {\"name\": \"jscode\", \"symbols\": [\"jscode\", /[^%]/], \"postprocess\": function(d) {return d[0] + d[1];}},\n    {\"name\": \"jscode\", \"symbols\": [\"jscode\", {\"literal\":\"%\"}, /[^}]/], \"postprocess\": function(d) {return d[0] + d[1] + d[2]; }},\n    {\"name\": \"whit\", \"symbols\": [\"whitraw\"]},\n    {\"name\": \"whit\", \"symbols\": [\"whitraw?\", \"comment\", \"whit?\"]},\n    {\"name\": \"whit?\", \"symbols\": []},\n    {\"name\": \"whit?\", \"symbols\": [\"whit\"]},\n    {\"name\": \"whitraw\", \"symbols\": [/[\\s]/]},\n    {\"name\": \"whitraw\", \"symbols\": [\"whitraw\", /[\\s]/]},\n    {\"name\": \"whitraw?\", \"symbols\": []},\n    {\"name\": \"whitraw?\", \"symbols\": [\"whitraw\"]},\n    {\"name\": \"comment\", \"symbols\": [{\"literal\":\"#\"}, \"commentchars\", {\"literal\":\"\\n\"}]},\n    {\"name\": \"commentchars\", \"symbols\": []},\n    {\"name\": \"commentchars\", \"symbols\": [\"commentchars\", /[^\\n]/]}\n]\n  , ParserStart: \"final\"\n}\nif (typeof module !== 'undefined'&& typeof module.exports !== 'undefined') {\n   module.exports = grammar;\n} else {\n   window.grammar = grammar;\n}\n})();\n","/home/travis/build/npmtest/node-npmtest-nearley/node_modules/nearley/lib/generate.js":"(function(root, factory) {\n    // if (typeof define === 'function' && define.amd) {\n    //     define(['nearley'], factory);\n    if (typeof module === 'object' && module.exports) {\n        module.exports = factory(require('./nearley'));\n    } else {\n        root.generate = factory(root.nearley);\n    }\n}(this, function(nearley) {\n\nfunction serializeRules(rules, builtinPostprocessors) {\n    return \"[\\n    \" + rules.map(function(rule) {\n      return serializeRule(rule, builtinPostprocessors);\n    }).join(\",\\n    \") + \"\\n]\";\n}\n\nfunction dedentFunc(func) {\n    var lines = func.toString().split(/\\n/);\n\n    if (lines.length === 1) {\n        return [lines[0].replace(/^\\s+|\\s+$/g, '')];\n    }\n\n    var indent = null;\n    var tail = lines.slice(1);\n    for (var i = 0; i < tail.length; i++) {\n        var match = /^\\s*/.exec(tail[i]);\n        if (match && match[0].length !== tail[i].length) {\n            if (indent === null ||\n                match[0].length < indent.length) {\n                indent = match[0];\n            }\n        }\n    }\n\n    if (indent === null) {\n        return lines;\n    }\n\n    return lines.map(function dedent(line) {\n        if (line.slice(0, indent.length) === indent) {\n            return line.slice(indent.length);\n        }\n        return line;\n    });\n}\n\nfunction tabulateString(string, indent, options) {\n    var lines;\n    if(Array.isArray(string)) {\n      lines = string;\n    } else {\n      lines = string.toString().split('\\n');\n    }\n\n    options = options || {};\n    tabulated = lines.map(function addIndent(line, i) {\n        var shouldIndent = true;\n\n        if(i == 0 && !options.indentFirst) {\n          shouldIndent = false;\n        }\n\n        if(shouldIndent) {\n            return indent + line;\n        } else {\n            return line;\n        }\n    }).join('\\n');\n\n    return tabulated;\n}\n\nfunction serializeSymbol(s) {\n    if (s instanceof RegExp) {\n        return s.toString();\n    } else if (s.token) {\n        return s.token;\n    } else {\n        return JSON.stringify(s);\n    }\n}\n\nfunction serializeRule(rule, builtinPostprocessors) {\n    var ret = '{';\n    ret += '\"name\": ' + JSON.stringify(rule.name);\n    ret += ', \"symbols\": [' + rule.symbols.map(serializeSymbol).join(', ') + ']';\n    if (rule.postprocess) {\n        if(rule.postprocess.builtin) {\n            rule.postprocess = builtinPostprocessors[rule.postprocess.builtin];\n        }\n        ret += ', \"postprocess\": ' + tabulateString(dedentFunc(rule.postprocess), '        ', {indentFirst: false});\n    }\n    ret += '}';\n    return ret;\n}\n\nvar generate = function (parser, exportName) {\n    if(!parser.config.preprocessor) {\n        parser.config.preprocessor = \"_default\";\n    }\n\n    if(!generate[parser.config.preprocessor]) {\n        throw new Error(\"No such preprocessor: \" + parser.config.preprocessor)\n    }\n\n    return generate[parser.config.preprocessor](parser, exportName);\n};\n\ngenerate.js = generate._default = generate.javascript = function (parser, exportName) {\n    var output = \"// Generated automatically by nearley\\n\";\n    output +=  \"// http://github.com/Hardmath123/nearley\\n\";\n    output += \"(function () {\\n\";\n    output += \"function id(x) {return x[0]; }\\n\";\n    output += parser.body.join('\\n');\n    output += \"var grammar = {\\n\";\n    output += \"    ParserRules: \" +\n        serializeRules(parser.rules, generate.javascript.builtinPostprocessors)\n        + \"\\n\";\n    output += \"  , ParserStart: \" + JSON.stringify(parser.start) + \"\\n\";\n    output += \"}\\n\";\n    output += \"if (typeof module !== 'undefined'\"\n        + \"&& typeof module.exports !== 'undefined') {\\n\";\n    output += \"   module.exports = grammar;\\n\";\n    output += \"} else {\\n\";\n    output += \"   window.\" + exportName + \" = grammar;\\n\";\n    output += \"}\\n\";\n    output += \"})();\\n\";\n    return output;\n};\ngenerate.javascript.builtinPostprocessors = {\n    \"joiner\": \"function joiner(d) {return d.join('');}\",\n    \"arrconcat\": \"function arrconcat(d) {return [d[0]].concat(d[1]);}\",\n    \"arrpush\": \"function arrpush(d) {return d[0].concat([d[1]]);}\",\n    \"nuller\": \"function(d) {return null;}\",\n    \"id\": \"id\"\n}\n\ngenerate.cs = generate.coffee = generate.coffeescript = function (parser, exportName) {\n    var output = \"# Generated automatically by nearley\\n\";\n    output +=  \"# http://github.com/Hardmath123/nearley\\n\";\n    output += \"do ->\\n\";\n    output += \"  id = (d)->d[0]\\n\";\n    output += tabulateString(dedentFunc(parser.body.join('\\n')), '  ') + '\\n';\n    output += \"  grammar = {\\n\";\n    output += \"    ParserRules: \" +\n        tabulateString(\n                serializeRules(parser.rules, generate.coffeescript.builtinPostprocessors),\n                '      ',\n                {indentFirst: false})\n    + \",\\n\";\n    output += \"    ParserStart: \" + JSON.stringify(parser.start) + \"\\n\";\n    output += \"  }\\n\";\n    output += \"  if typeof module != 'undefined' \"\n        + \"&& typeof module.exports != 'undefined'\\n\";\n    output += \"    module.exports = grammar;\\n\";\n    output += \"  else\\n\";\n    output += \"    window.\" + exportName + \" = grammar;\\n\";\n    return output;\n};\ngenerate.coffeescript.builtinPostprocessors = {\n    \"joiner\": \"(d) -> d.join('')\",\n    \"arrconcat\": \"(d) -> [d[0]].concat(d[1])\",\n    \"arrpush\": \"(d) -> d[0].concat([d[1]])\",\n    \"nuller\": \"() -> null\",\n    \"id\": \"id\"\n};\n\ngenerate.ts = generate.typescript = function (parser, exportName) {\n    var output = \"// Generated automatically by nearley\\n\";\n    output +=  \"// http://github.com/Hardmath123/nearley\\n\";\n    output += \"function id(d:any[]):any {return d[0];}\\n\";\n    output += parser.body.join('\\n');\n    output += \"interface NearleyGrammar {ParserRules:NearleyRule[]; ParserStart:string};\\n\";\n    output += \"interface NearleyRule {name:string; symbols:NearleySymbol[]; postprocess?:(d:any[],loc?:number,reject?:{})=>any};\\n\";\n    output += \"type NearleySymbol = string | {literal:any} | {test:(token:any) => boolean};\\n\";\n    output += \"export var grammar : NearleyGrammar = {\\n\";\n    output += \"    ParserRules: \" + serializeRules(parser.rules, generate.typescript.builtinPostprocessors) + \"\\n\";\n    output += \"  , ParserStart: \" + JSON.stringify(parser.start) + \"\\n\";\n    output += \"}\\n\";\n    return output;\n};\ngenerate.typescript.builtinPostprocessors = {\n    \"joiner\": \"(d) => d.join('')\",\n    \"arrconcat\": \"(d) => [d[0]].concat(d[1])\",\n    \"nuller\": \"(d) => null\",\n    \"id\": \"id\"\n};\n\n\nreturn generate;\n\n}));\n","/home/travis/build/npmtest/node-npmtest-nearley/node_modules/nearley/lib/lint.js":"// Node-only\n\nvar warn = function (opts, str) {\n    opts.out.write(\"WARN\"+\"\\t\" + str + \"\\n\");\n}\n\nfunction lintNames(grm, opts) {\n    var all = [];\n    grm.rules.forEach(function(rule) {\n        all.push(rule.name);\n    });\n    grm.rules.forEach(function(rule) {\n        rule.symbols.forEach(function(symbol) {\n            if (!symbol.literal && !symbol.token && symbol.constructor !== RegExp) {\n                if (all.indexOf(symbol) === -1) {\n                    warn(opts,\"Undefined symbol `\" + symbol + \"` used.\");\n                }\n            }\n        });\n    });\n}\nfunction lint(grm, opts) {\n    if (!opts.out) opts.out = process.stderr;\n    lintNames(grm, opts);\n}\n\nmodule.exports = lint;\n","/home/travis/build/npmtest/node-npmtest-nearley/node_modules/nearley/bin/nearley-railroad.js":"#!/usr/bin/env node\n\ntry {\n  var rr = require('railroad-diagrams');\n} catch(e) {\n  // optional dependency not fullfilled\n  console.log('Error: When you installed nearley, the dependency \"railroad-diagrams\" failed to install. Try running \"npm install -g nearley\" to re-install nearley. If that doesn\\'t fix the problem, please file an issue on the nearley GitHub repository.')\n  process.exit(1)\n}\n\nvar fs = require('fs');\nvar path = require('path');\nvar nomnom = require('nomnom');\n\nvar opts = nomnom\n    .script('nearley-railroad')\n    .option('file', {\n        position: 0,\n        help: \"A grammar .ne file (default stdin)\"\n    })\n    .option('out', {\n        abbr: 'o',\n        help: \"File to output to (default stdout).\"\n    })\n    .option('version', {\n        abbr: 'v',\n        flag: true,\n        help: \"Print version and exit\",\n        callback: function() {\n            return require('../package.json').version;\n        }\n    }).parse();\n\nvar input = opts.file ? fs.createReadStream(opts.file) : process.stdin;\nvar output = opts.out ? fs.createWriteStream(opts.out) : process.stdout;\n\nfunction railroad(grm) {\n    var rules = {};\n    grm.forEach(function(instr) {\n        if (instr.rules) {\n            if (!rules[instr.name]) {\n                rules[instr.name] = [];\n            }\n            rules[instr.name] = rules[instr.name].concat(instr.rules);\n        }\n    });\n\n    var style = fs.readFileSync(\n        path.join(\n            path.dirname(require.resolve('railroad-diagrams')),\n            'railroad-diagrams.css'\n        )\n    );\n\n    var diagrams = Object.keys(rules).map(function(r) {\n        return [\n          '<h1><code>' + r + '</code></h1>',\n          '<div>',\n            diagram(r).toString(),\n          '</div>'\n        ].join('\\n');\n    });\n\n    function diagram(name) {\n        var selectedrules = rules[name];\n        var outer = {subexpression: selectedrules};\n\n        function renderTok(tok) {\n            // ctx translated to correct position already\n            if (tok.subexpression) {\n                return new rr.Choice(0, tok.subexpression.map(renderTok));\n            } else if (tok.ebnf) {\n                switch (tok.modifier) {\n                case \":+\":\n                    return new rr.OneOrMore(renderTok(tok.ebnf));\n                    break;\n                case \":*\":\n                    return new rr.ZeroOrMore(renderTok(tok.ebnf));\n                    break;\n                case \":?\":\n                    return new rr.Optional(renderTok(tok.ebnf));\n                    break;\n                }\n            } else if (tok.literal) {\n                return new rr.Terminal(JSON.stringify(tok.literal));\n            } else if (tok.mixin) {\n                return new rr.Comment(\"Pas implementé.\");\n            } else if (tok.macrocall) {\n                return new rr.Comment(\"Pas implementé.\");\n            } else if (tok.tokens) {\n                return new rr.Sequence(tok.tokens.map(renderTok));\n            } else if (typeof(tok) === 'string') {\n                return new rr.NonTerminal(tok);\n            } else if (tok.constructor === RegExp) {\n                return new rr.Terminal(tok.toString());\n            } else {\n                return new rr.Comment(\"[Unimplemented]\");\n            }\n        }\n\n        return new rr.Diagram([renderTok(outer)]);\n    }\n\n    return [\n      '<!DOCTYPE html>',\n      '<html>',\n        '<head>',\n          '<meta charset=\"UTF-8\">',\n          '<style type=\"text/css\">',\n            style.toString(),\n          '</style>',\n        '</head>',\n        '<body>',\n          diagrams.join('\\n'),\n        '</body>',\n      '</html>'\n    ].join('\\n');\n}\n\nvar nearley = require('../lib/nearley.js');\nvar StreamWrapper = require('../lib/stream.js');\nvar parserGrammar = new require('../lib/nearley-language-bootstrapped.js');\nvar parser = new nearley.Parser(parserGrammar.ParserRules, parserGrammar.ParserStart);\ninput\n    .pipe(new StreamWrapper(parser))\n    .on('finish', function() {\n        output.write(railroad(parser.results[0]));\n    });\n","/home/travis/build/npmtest/node-npmtest-nearley/node_modules/nearley/bin/nearley-unparse.js":"#!/usr/bin/env node\n\nvar fs = require('fs');\nvar nearley = require('../lib/nearley.js');\nvar nomnom = require('nomnom');\nvar randexp = require('randexp');\n\nvar opts = nomnom\n    .script('nearley-unparse')\n    .option('file', {\n        position: 0,\n        help: \"A grammar .js file\",\n        required: true,\n    })\n    .option('start', {\n        abbr: 's',\n        help: \"An optional start symbol (if not provided then use the parser start symbol)\",\n    })\n    .option('count', {\n        abbr: 'n',\n        help: 'The number of samples to generate (separated by \\\\n).',\n        default: 1\n    })\n    .option('depth', {\n        abbr: 'd',\n        help: 'The depth bound of each sample. Defaults to -1, which means \"unbounded\".',\n        default: -1\n    })\n    .option('out', {\n        abbr: 'o',\n        help: \"File to output to (defaults to stdout)\",\n    })\n    .option('version', {\n        abbr: 'v',\n        flag: true,\n        help: \"Print version and exit\",\n        callback: function() {\n            return require('../package.json').version;\n        }\n    })\n    .parse();\n\nvar output = opts.out ? fs.createWriteStream(opts.out) : process.stdout;\n\nvar grammar = new require(require('path').resolve(opts.file));\n\nfunction gen(grammar, name) {\n    // The first-generation generator. It just spews out stuff randomly, and is\n    // not at all guaranteed to terminate. However, it is extremely performant.\n\n    var stack = [name];\n    var rules = grammar.ParserRules;\n\n    while (stack.length > 0) {\n        var currentname = stack.pop();\n        if (typeof(currentname) === 'string') {\n            var goodrules = grammar.ParserRules.filter(function(x) {\n                return x.name === currentname;\n            });\n            if (goodrules.length > 0) {\n                var chosen = goodrules[\n                    Math.floor(Math.random()*goodrules.length)\n                ];\n                for (var i=chosen.symbols.length-1; i>=0; i--) {\n                    stack.push(chosen.symbols[i]);\n                }\n            } else {\n                throw new Error(\"Nothing matches rule: \"+currentname+\"!\");\n            }\n        } else if (currentname.test) {\n            var c = new randexp(currentname).gen();\n            output.write(c);\n            continue;\n        } else if (currentname.literal) {\n            var c = currentname.literal;\n            output.write(c);\n            continue;\n        }\n    }\n}\n\nfunction gen2(grammar, name, depth) {\n    // I guess you could call this the second-generation generator.\n    // All it does is bound its output by a certain depth without having to\n    // backtrack. It doesn't give guarantees on being uniformly random, but\n    // that's doable if we *really* need it (by converting min_depth_rule, a\n    // predicate, into something that counts the number of trees of depth d).\n\n    var rules = grammar.ParserRules;\n    var min_depths_rule = [];\n\n    function synth_nt(name, depth) {\n        var good_rules = [];\n        var min_min_depth = Infinity;\n        for (var i=0; i<rules.length; i++) {\n            min_depths_rule = [];\n            var size = min_depth_rule(i, []);\n            if (rules[i].name === name) {\n                min_min_depth = Math.min(min_min_depth, size);\n                if (size < depth) {\n                    good_rules.push(i);\n                }\n            }\n        }\n        if (good_rules.length === 0) {\n            throw (\"No strings in your grammar have depth \"+depth+\" (and \" +\n                   \"none are shallower). Try increasing -d to at least \"+\n                   (min_min_depth+1) + \".\");\n        }\n\n        var r = good_rules[Math.floor(Math.random()*good_rules.length)];\n        return synth_rule(r, depth);\n    }\n    function synth_rule(idx, depth) {\n        var ret = \"\";\n        for (var i=0; i<rules[idx].symbols.length; i++) {\n            var tok = rules[idx].symbols[i];\n            if (typeof(tok) === 'string') {\n                ret += synth_nt(tok, depth-1);\n            } else if (tok.test) {\n                ret += new randexp(tok).gen();\n            } else if (tok.literal) {\n                ret += tok.literal;\n            }\n        }\n        return ret;\n    }\n    function min_depth_nt(name, visited) {\n        if (visited.indexOf(name) !== -1) {\n            return +Infinity;\n        }\n        var d = +Infinity;\n        for (var i=0; i<rules.length; i++) {\n            if (rules[i].name === name) {\n                d = Math.min(d, min_depth_rule(i, [name].concat(visited)));\n            }\n        }\n        return d;\n    }\n    function min_depth_rule(idx, visited) {\n        if (min_depths_rule[idx] !== undefined) return min_depths_rule[idx];\n\n        var d = 1;\n        for (var i=0; i<rules[idx].symbols.length; i++) {\n            var tok = rules[idx].symbols[i];\n            if (typeof(tok) === 'string') {\n                d = Math.max(d, 1+min_depth_nt(tok, visited));\n            }\n        }\n        min_depths_rule[idx] = d;\n        return d;\n    }\n\n    var ret = synth_nt(name, depth);\n    return ret;\n}\n\n\n\n// the main loop\nfor (var i=0; i<parseInt(opts.count); i++) {\n    if (opts.depth === -1) {\n        gen(grammar, opts.start ? opts.start : grammar.ParserStart);\n    } else {\n        output.write(gen2(grammar, opts.start ? opts.start : grammar.ParserStart, opts.depth));\n    }\n    if (opts.count > 1) output.write(\"\\n\");\n}\n","/home/travis/build/npmtest/node-npmtest-nearley/node_modules/nearley/www/main.js":"window.addEventListener(\"load\", function() {\n    var grammarInput = document.getElementById(\"grammar-input\");\n    var compileInput = document.getElementById(\"compile-grammar\");\n    compileInput.addEventListener(\"click\", function() {\n        var grm = grammarInput.value;\n        var parser = new nearley.Parser(grammar.ParserRules, grammar.ParserStart);\n        parser.feed(grammarInput.value);\n        var result = parser.results[0];\n        var compiled = Compile(result, {});\n        var js = generate(compiled);\n        window.open(\"data:text/javascript;charset=utf-8,\"+encodeURIComponent(js));\n    }, false);\n\n}, false);\n"}